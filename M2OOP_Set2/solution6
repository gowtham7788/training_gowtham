using namespace std;
#include<iostream>
#include<cstring>
#include<string>
#include<sstream>
float calculateBasicCost(bool flag,int sec)
{
	if(flag==0)
	{
		return sec*0.759;
	}
	else
	{
		return sec*1.761;
	}
}
float calculateOffPeakDiscount(int hour,float basic_cost, bool flag)
{
	if(hour>=19||hour<=6)
	{
		if(flag==0)
		{
			return basic_cost*0.4;
		}
		else
		{
			return basic_cost*0.5;
		}
	}
return 0;
}
float calculateShareCallDiscount(float basic_cost,float off_peak_discount,bool share_call_flag,bool distance_flag)
{
	float cost;
	cost=basic_cost-off_peak_discount;
	if(share_call_flag==1&&distance_flag==1)
	{
		return cost*0.5;
	}
	else
	{
		return 0;
	}
}
float calculateTotalCost(float net_cost,bool flag)
{
	if(flag==0)
	{
		if(net_cost<59.400)
		{
			cout<<"\nNet cost is low. You have to pay minimum charge(59.400) ";
			cout<<"\nVAT(14%) = "<<59.400*0.14;
			return 59.400+(59.400*0.14);
		}
		else
		{
			cout<<"\nVAT(14%) = "<<net_cost*0.14;
			return net_cost+(net_cost*0.14);
		}
	}
	else
	{
		if(net_cost<89.000)
		{
			cout<<"\nNet cost is low. You have to pay minimum charge(89.000) ";
			cout<<"\nVAT(14%) = "<<89.000*0.14;
			return 89.000+(89.000*0.14);
		}
		else
		{
			cout<<"\nVAT(14%) = "<<net_cost*0.14;
			return net_cost+(net_cost*0.14);
		}
	}
}
int main()
{
	string a,b,c;
	int start_hour,start_mint,start_sec;
	int dur_m,dur_s;
	int total_seconds;
	float basic_cost;
	float off_peak_discount;
	float share_call_discount;
	float net_cost;
	float vat;
	float total_cost;
	bool distance_flag;
	bool share_call_flag;
	cout<<"Enter starting time of the call in HH:MM:SS format ";
	getline(cin,a,':');
	getline(cin,b,':');
	getline(cin,c);
	stringstream ob1(a);
	ob1>>start_hour;
	stringstream ob2(b);
	ob2>>start_mint;
	stringstream ob3(c);
	ob3>>start_sec;
	cout<<"\nEnter duration of the call in MM:SS format ";
	getline(cin,a,':');
	getline(cin,b);
	stringstream ob4(a);
	stringstream ob5(b);
	ob4>>dur_m;
	ob5>>dur_s;
	total_seconds=(dur_m*60)+dur_s;
	cout<<"\nWhether the duration was more than 50km away\nPress 1 for yes,0 for no ";
	cin>>distance_flag;
	basic_cost=calculateBasicCost(distance_flag, total_seconds);
	off_peak_discount=calculateOffPeakDiscount(start_hour,basic_cost, distance_flag);
	cout<<"\nWhether the call was share-call\nPress 1 for yes,0 for no ";
	cin>>share_call_flag;
	share_call_discount=calculateShareCallDiscount(basic_cost,off_peak_discount,share_call_flag,distance_flag);
	net_cost=basic_cost-off_peak_discount-share_call_discount;
	cout<<"\nThe basic cost "<<basic_cost;
	cout<<"\nOff peak discount "<<off_peak_discount;
	cout<<"\nThe basic cost after off peak discount "<<basic_cost-off_peak_discount;
	cout<<"\nshared call discount "<<share_call_discount;
	cout<<"\nNet cost "<<net_cost;
	total_cost=calculateTotalCost(net_cost,distance_flag);
	cout<<"\nTotal cost "<<total_cost;
}
